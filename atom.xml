<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Runge Zhai's Blog]]></title>
  <link href="http://rungezhai.github.io/atom.xml" rel="self"/>
  <link href="http://rungezhai.github.io/"/>
  <updated>2015-12-25T17:47:50+08:00</updated>
  <id>http://rungezhai.github.io/</id>
  <author>
    <name><![CDATA[Runge Zhai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Merge Static Libraries]]></title>
    <link href="http://rungezhai.github.io/blog/2015/12/24/merge-static-libraries/"/>
    <updated>2015-12-24T15:29:24+08:00</updated>
    <id>http://rungezhai.github.io/blog/2015/12/24/merge-static-libraries</id>
    <content type="html"><![CDATA[<p>Yesterday I was asked to merge multiple Libraries into one. This is a whole new area! Here is the background: Members of our department are developing three submodules of the main iOS application, and each submodule is a subproject of main application and output a <code>.a</code> static library file and a <code>.bundle</code> resource file. And now the head of our team wants to merge all the libraries into one and only expose this only one <code>.a</code> and <code>.bundle</code> file to the main application. <strong><code>"And with minimum modification"</code></strong>, said my boss.</p>

<!--more-->

<h2 id="what-i-did">What I Did</h2>

<p>So I created a new project and make the current three subproject as subprojects of the new project. The new project has two target a <code>.a</code> library and  <code>.bundle</code> resource. Both targets’ output are output of the merging of the three submodule accordingly.</p>

<p>The bundle file is just something like a folder, so merging is simply copying three folder into another. As of Xcode, go to <code>Build Phases -&gt; Copy Bundle Resources</code> and add subproject’s .bundle target.</p>

<p>The merging of <code>.a</code> file are simple too, it’s only that I have never touched this area before.
Add the following line to <code>Build Phases -&gt; Click "+" button on the topleft -&gt; New Run Script Phase</code> (Say we want merge <code>A.a</code>, <code>B.a</code>, <code>C.a</code> into <code>AllInOne.a</code>)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">libtool -static -o <span class="k">${</span><span class="nv">BUILT_PRODUCTS_DIR</span><span class="k">}</span>/AllInOne.a <span class="k">${</span><span class="nv">BUILT_PRODUCTS_DIR</span><span class="k">}</span>/A.a <span class="k">${</span><span class="nv">BUILT_PRODUCTS_DIR</span><span class="k">}</span>/B.a <span class="k">${</span><span class="nv">BUILT_PRODUCTS_DIR</span><span class="k">}</span>/C.a
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <p>As of <code>Minimum Modification</code>, the only one is accessing bundle resources. Previously we get bundle from <code>MainBundle</code>, but now we have to get the merged bundle first and then get the bundle we want in the merged bundle, which, I think, is qualified as <code>Minimum Modification</code>.</p>
</blockquote>

<h2 id="what-i-learned">What I Learned</h2>

<p>The solution above is not rigorous. One of the libraries might not support architectures that others do, so the might-not-supported architectures portion of the libraries should not be merged. The following command can figure out the architectures for which the library is being built:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">LIPO_ARCH</span><span class="o">=</span><span class="k">$(</span>lipo -info <span class="k">${</span><span class="nv">BUILT_PRODUCTS_DIR</span><span class="k">}</span>/<span class="k">${</span><span class="nv">EXECUTABLE_NAME</span><span class="k">}</span> <span class="p">|</span> awk <span class="s1">&#39;END{ print $NF }&#39;</span><span class="k">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The following command creates a thin version of the library with supported architectures in <code>LIPO_ARCH</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">lipo -thin <span class="k">${</span><span class="nv">LIPO_ARCH</span><span class="k">}</span> <span class="k">${</span><span class="nv">LIBRARY_NAME</span><span class="k">}</span> -output <span class="k">${</span><span class="nv">LIBRARY_NAME</span><span class="k">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <p>A flat library is a library that support multiple architectures.</p>
</blockquote>

<p><br /></p>

<p>Reference</p>

<p><a href="http://stackoverflow.com/questions/9531014/linking-2-static-libs-into-1-for-ios/21225126#21225126">Linking 2 static libs into 1 for iOS</a></p>

<p><a href="http://www.theconsultant.net/2005/09/macosx-operating-on-fat-files/">MacOSX: Trimming fat from Mach-O fat files</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Q&amp;A]]></title>
    <link href="http://rungezhai.github.io/blog/2015/12/22/octopress-q-and-a/"/>
    <updated>2015-12-22T22:36:52+08:00</updated>
    <id>http://rungezhai.github.io/blog/2015/12/22/octopress-q-and-a</id>
    <content type="html"><![CDATA[
<p>关于Octopress的配置在<a href="http://shengmingzhiqing.com/">这个博客</a>中有详细的教程, 这里我只是做一些很必要的配置或者开发中遇到的各种问题的总结. 会一直持续更新.</p>

<!--more-->

<h3 id="section">文章在首页显示摘要</h3>

<p>一般情况下我们想让文章在主页只显示摘要, 而不是全部显示, 这种情况下, 我们只需要在文章开头的摘要后面空行加入<code>&lt;!--more--&gt;</code>.</p>

<h3 id="markdown">Markdown文件拓展名修改</h3>

<p>默认的MarkDown文件名是<code>.markdown</code>. 我们想把它改成<code>.md</code>, 这样更简洁. 方法是修改 <code>rakefile</code> 文件, 将下面两行</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">new_post_ext    = "markdown"  # default new post file extension when using the new_post task
</span><span class="line">new_page_ext    = "markdown"  # default new page file extension when using the new_page task</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>替换成</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">new_post_ext    = "md"  # 默认新日志文件后缀
</span><span class="line">new_page_ext    = "md"  # 默认新页面文件后缀</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="markdown-1">修改默认Markdown解释器</h3>

<p>默认的Markdown解释器是<code>rdiscount</code>, 可以把它改成GitHub推荐的<code>kramdown</code>. 打开<code>Gemfile</code>, 在最后新增下面一行</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gem 'kramdown'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后在Terminal执行<code>bundle install</code>安装这个依赖项(很可能已经安装过了).</p>

<p>再打开<code>_config.yml</code>, 找到<code>markdown: rdiscount</code>, 将其中的<code>rdiscout</code>改成<code>kramdown</code>. 并将下面的删除或注释掉(yml文件的行注释是前面加<code>#</code>).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rdiscount:
</span><span class="line">  extensions:
</span><span class="line">    - autolink
</span><span class="line">    - footnotes
</span><span class="line">    - smart
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-1">在主页侧边栏显示文章分类</h3>

<ul>
  <li>在<code>plugins</code>目录下新建<code>category_list_tag.rb</code>文件, 内容如下:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class=""><span class="line">module Jekyll 
</span><span class="line">  class CategoryListTag &lt; Liquid::Tag 
</span><span class="line">    def render(context) 
</span><span class="line">      html = "" 
</span><span class="line">      categories = context.registers[:site].categories.keys 
</span><span class="line">      categories.sort.each do |category| 
</span><span class="line">        posts_in_category = context.registers[:site].categories[category].size 
</span><span class="line">        category_dir = context.registers[:site].config['category_dir'] 
</span><span class="line">        category_url = File.join(category_dir, category.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase) 
</span><span class="line">        html &lt;&lt; "&lt;li class='category'&gt;&lt;a href='http://rungezhai.github.io/#{category_url}/'&gt;#{category} (#{posts_in_category})&lt;/a&gt;&lt;/li&gt;\n" 
</span><span class="line">      end 
</span><span class="line">      html 
</span><span class="line">    end 
</span><span class="line">  end 
</span><span class="line">end
</span><span class="line">	
</span><span class="line">Liquid::Template.register_tag('category_list', Jekyll::CategoryListTag)
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><code>source/include/custom/asides</code>目录下新建<code>category_list.html</code>文件, 内容如下:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;section&gt;
</span><span class="line">  &lt;h1&gt;Categories&lt;/h1&gt;
</span><span class="line">  &lt;ul id="categories"&gt;
</span><span class="line">    {% category_list %}
</span><span class="line">  &lt;/ul&gt;
</span><span class="line">&lt;/section&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>修改<code>_config.yml</code>文件</p>

    <p>找到以<code>default_asides:</code>开头的一行, 添加<code>custom/asides/category_list.html</code>. 
  到了这里, 重新生成部署已经可以看到结果了, 但仔细看会发现, 分类的名字中的大写字母都被变成了小写, 如果想改成本来的大小写, 参考下一步.</p>
  </li>
  <li>
    <p>修改<code>Jekyll</code>, 取消自动小写分类名称</p>

    <p>找到<code>Jekyll</code>的源代码目录, 我这里是<code>/Users/liuge/.rvm/gems/ruby-1.9.3-p551/gems/jekyll-2.5.3/lib/jekyll</code> 修改目录下的<code>post.rb</code>文件, 找到如下内容, 删除其中的<code>downcase</code>.</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">self.categories = self.data.pluralized_array('category', 'categories').map {|c| c.to_s.downcase}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <p>如果遇到<code>Error:  Pygments can't parse unknown language: &lt;/p&gt;</code>这种问题, 一般是文章中包含HTML代码等非常规文字, 修改<code>plugins/pygments_code.rb</code>文件, 将<code>raise "Pygments can't parse unknown language: #{lang}."</code>替换成<code>raise "Pygments can't parse unknown language: #{lang}#{code}."</code> 然后再执行 <code>rake generate</code> 就可以看到产生问题的位置. 实际使用中, 我发现产生问题的位置都是在文章中贴的HTML代码块或者其他非常规文字的位置, 解决方法是代码块结束的<code>```</code><sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup>(triple-backtick)前后都需要留一个空行. 顺便说一句, Pygments是语法高亮插件.</p>
</blockquote>

<h3 id="section-2">在文章中显示特殊字符</h3>

<p>有一些字符是Octopress的保留字符, 比如<code>{{, ^ ...</code>等. 若在文章中直接输入这些字符, 文章生成可能会报错或者显示一些意想不到的内容.</p>

<p>若要在文中显示这些字符, 需要将包含这些字符的文字放在<code>{% raw %}</code> 和 <code>{% endraw %}</code>之间.</p>

<h3 id="octopress--">已有Octopress在新机器上的配置 / 多终端并行写作</h3>

<p>如果已经有了自己的 Octopress, 如何在一台新机器上将文章同步到本地并配置环境. 就算只有一个人来维护Blog, 有时候也难免会遇到换电脑什么的情况, 怎么办.</p>

<p>首先, 科普, Blog 的 Repository有两个分支, <code>master</code>和<code>source</code>, master 是存储的 Blog 网站本身, 而source是Blog的源文件. master的内容存储在根目录下的<code>_deploy</code>目录下, 当我们执行<code>rake deploy</code>, 其中就包含 push 到 master 操作, 当我们随后 push source 分支时, <code>_deploy</code>目录会被忽略, 详细内容可以查看<code>source</code>分支的<code>.gitignore</code>文件.</p>

<ul>
  <li>将 Blog clone 到本地</li>
</ul>

<p>将 source 分支 clone 到本地目录 (下面是octopress)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git clone -b source git@github.com:username/username.github.com.git octopress </span></code></pre></td></tr></table></div></figure></notextile></div>

<p>将 master 分支 clone 到 上面 octopress目录下的 _deploy 目录下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd octopress  
</span><span class="line">git clone git@github.com:username/username.github.com.git _deploy  </span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>配置环境</li>
</ul>

<p>包括安装ruby和各种依赖项, 参考<a href="http://rungezhai.github.io/blog/2015/12/22/establishing-personal-blog-using-octopress/">这里</a>, 不再需要执行<code>rake install</code>安装主题.</p>

<ul>
  <li>更新</li>
</ul>

<p>如果在其他地方更新过文章, 那么在本地需要 pull 一下最新的提交. 由于 master 是 Octopress自动更新的, 所以我们只需要更新 source 分支.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git pull origin source  # update the local source branch</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-3">站内文章链接</h3>

<p>如果想在文章中引用自己的其他文章, 可以使用下面的格式, 其中<code>2010-07-21-name-of-post</code>是要引用的markdown或者html文件的文件名:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[Some Link]({% post_url 2010-07-21-name-of-post %})</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="about">导航栏新增About</h3>

<p>Octopress有两种类型的文章, 一种叫post, 一种叫page, 概念和WordPress差不多. 如果想在导航栏新增”关于”页, 这是一个page, 不是我们平时发表的post. post源文件存放在source/_posts目录下, 每个page默认对应一个目录, 直接存放在source目录下, Octopress应该是自动查找page目录下的index.md或者index.html.</p>

<ul>
  <li>新建页面</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rake new_page["about"]</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>执行完以后会在source下默认新建一个名为about的目录, 目录下有一个名为<code>index.md</code>的文件. 和post一样, 可以输入自己想写的内容.</p>

<ul>
  <li>导航栏新建链接指向该page</li>
</ul>

<p>编辑source/_includes/custom/navigation.html文件, 默认的内容是</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;ul class="main-navigation"&gt; 
</span><span class="line">  &lt;li&gt;&lt;a href="{{ root_url }}/"&gt;Blog&lt;/a&gt;&lt;/li&gt; 
</span><span class="line">  &lt;li&gt;&lt;a href="{{ root_url }}/blog/archives"&gt;Archives&lt;/a&gt;&lt;/li&gt; 
</span><span class="line">&lt;/ul&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们添加一行</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;ul class="main-navigation"&gt;
</span><span class="line">  &lt;li&gt;&lt;a href="{{ root_url }}/"&gt;Blog&lt;/a&gt;&lt;/li&gt;
</span><span class="line">  &lt;li&gt;&lt;a href="{{ root_url }}/blog/archives"&gt;Archives&lt;/a&gt;&lt;/li&gt;
</span><span class="line">  &lt;li&gt;&lt;a href="{{ root_url }}/about"&gt;About&lt;/a&gt;&lt;/li&gt;
</span><span class="line">&lt;/ul&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>修改字体大小和颜色</li>
</ul>

<p>字体的样式在sass/base/_typography.scss中设置, 但不建议直接修改该文件. 如果想做修改的话, 修改sass/custom/_styles.scss文件.</p>

<hr />

<p><br /></p>

<p>Reference</p>

<p><a href="http://www.narga.net/improve-octopress-advanced-tweaks-tips/">improve-octopress-advanced-tweaks-tips</a></p>

<p><a href="http://i.rexdf.org/blog/2014/09/26/octopressbo-ke-geng-xin-ri-zhi/">Octopress CDN Config</a></p>

<p><a href="https://daringfireball.net/projects/markdown/syntax">Markdown Syntax</a></p>

<p><a href="ttp://kramdown.gettalong.org/syntax.html">Kramdown Syntax</a></p>
<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>关于markdown如何显示<code>```</code>等特殊字符, 以及如何添加脚注(footnotes), 参考<a href="https://daringfireball.net/projects/markdown/syntax">这里</a> <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Establishing Personal Blog Using Octopress]]></title>
    <link href="http://rungezhai.github.io/blog/2015/12/22/establishing-personal-blog-using-octopress/"/>
    <updated>2015-12-22T21:40:00+08:00</updated>
    <id>http://rungezhai.github.io/blog/2015/12/22/establishing-personal-blog-using-octopress</id>
    <content type="html"><![CDATA[
<p>本来是想直接用Jekyll进行个人博客搭建的, 但是搭建完以后发现, 生成的页面太原始了, 对于markdown的代码高亮基本就没有, 只是和其他文字字体不一样, 一点都不明显. 况且我对于Web开发并不熟, 自己调整页面布局什么的又是无底洞了. 所以虽然配置过程很痛苦, 最后还是转向了Octopress.</p>

<!--More-->

<p>首先说明, 本文的环境是Mac OSX.</p>

<p>本来配置过程并不复杂, 就几句命令, 但是其背后是各种依赖, 每一步都是坑, 先贴一下其中用到的Bundle的依赖, 让大家见识一下:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Using rake 10.4.2
</span><span class="line">Using RedCloth 4.2.9
</span><span class="line">Using blankslate 2.1.2.4
</span><span class="line">Using chunky_png 1.3.4
</span><span class="line">Using fast-stemmer 1.0.2
</span><span class="line">Using classifier-reborn 2.0.3
</span><span class="line">Using coffee-script-source 1.9.1.1
</span><span class="line">Using execjs 2.6.0
</span><span class="line">Using coffee-script 2.4.1
</span><span class="line">Using colorator 0.1
</span><span class="line">Using multi_json 1.11.2
</span><span class="line">Using sass 3.4.18
</span><span class="line">Using compass-core 1.0.3
</span><span class="line">Using compass-import-once 1.0.5
</span><span class="line">Using rb-fsevent 0.9.6
</span><span class="line">Using ffi 1.9.10
</span><span class="line">Using rb-inotify 0.9.5
</span><span class="line">Using compass 1.0.3
</span><span class="line">Using tilt 2.0.1
</span><span class="line">Using haml 4.0.7
</span><span class="line">Using jekyll-coffeescript 1.0.1
</span><span class="line">Using jekyll-gist 1.3.4
</span><span class="line">Using jekyll-paginate 1.1.0
</span><span class="line">Using jekyll-sass-converter 1.3.0
</span><span class="line">Using listen 3.0.3
</span><span class="line">Using jekyll-watch 1.3.0
</span><span class="line">Using kramdown 1.8.0
</span><span class="line">Using liquid 2.6.3
</span><span class="line">Using mercenary 0.3.5
</span><span class="line">Using posix-spawn 0.3.11
</span><span class="line">Using yajl-ruby 1.2.1
</span><span class="line">Using pygments.rb 0.6.3
</span><span class="line">Using redcarpet 3.3.2
</span><span class="line">Using safe_yaml 1.0.4
</span><span class="line">Using parslet 1.5.0
</span><span class="line">Using toml 0.1.2
</span><span class="line">Using jekyll 2.5.3
</span><span class="line">Using jekyll-sitemap 0.9.0
</span><span class="line">Using octopress-hooks 2.6.1
</span><span class="line">Using octopress-date-format 2.0.2
</span><span class="line">Using rack 1.6.4
</span><span class="line">Using rack-protection 1.5.3
</span><span class="line">Using rdiscount 2.1.8
</span><span class="line">Using sass-globbing 1.0.0
</span><span class="line">Using sinatra 1.4.6
</span><span class="line">Using stringex 1.4.0
</span><span class="line">Using bundler 1.10.6</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>一屏幕都显示不开有没有!!!</p>

<h3 id="brew">配置Brew</h3>

<ul>
  <li>安装</li>
</ul>

<p>HomeBrew 是一个非常有用的软件包管理系统, 一般情况下, Mac机器已经安装过Brew了. 可以使用<code>brew --version</code>查看brew的版本. 如果机器没有安装Brew, 可以运行下面命令安装</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>或者想卸载重装, 运行下面命令卸载</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>按照提示一步一步来即可, 期间可能会遇到<code>Permission denied</code>什么的, 那么就在命令前面加上<code>sudo</code>(super do)再执行一遍喽.</p>

<ul>
  <li>诊断Brew</li>
</ul>

<p>运行 <code>brew doctor</code> 来检查Brew的状况. 
如果出现如 <code>Unbrewed *** were found</code> 这种提示, 可以忽略, 如果实在不放心, 那就按照提示把它们统统删掉(不放心可以删之前先备份).
如果出现 <code>Homebrew's sbin was not found in your PATH but you have installed...</code> 这种提示, 在命令行运行 <code>export PATH="/usr/local/sbin:$PATH"</code>.
总之, 到最后如果完全没有问题的话, 运行 <code>brew doctor</code> 会出现 <code>Your system is ready to brew.</code></p>

<h3 id="github-repository">新建Github Repository</h3>
<p>新建一个repository, 命名规则为<code>[your_username].github.io</code>. 把其中的<code>[your_username]</code>换成你自己在Github 上的用户名, 我这里是rungezhai.github.io. 记下这个repository的链接, https或者SSH都可以, 下面会用到.</p>

<h3 id="octopress">本地安装Octopress</h3>

<ul>
  <li>安装Ruby</li>
</ul>

<p>首先使用RVM安装Ruby, Octopress使用的ruby最好是1.9.3版本, Mac10.10以后的版本自带的Ruby版本太高, 最好不要超过2.0.0</p>

<p>执行下面的命令安装RVM</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">curl -L https://get.rvm.io | bash -s stable --ruby</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>执行下面的命令安装ruby</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rvm install 2.0.0
</span><span class="line">rvm use 2.0.0
</span><span class="line">rvm rubygems latest
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>把Octopress克隆到本地</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git clone git://github.com/imathis/octopress.git rungezhai.github.io
</span><span class="line">cd rungezhai.github.io</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最后一个参数<code>rungezhai.github.io</code>是克隆到的目录, 我为了命名统一, 克隆到了和Github repository同样名字的目录下.</p>

<p>然后安装所需的依赖项</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo gem install bundler
</span><span class="line">bundle install</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>期间可能会出现如下类似错误</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">An error occurred while installing tilt (2.0.1), and Bundler
</span><span class="line">cannot continue.
</span><span class="line">Make sure that `gem install tilt -v '2.0.1'` succeeds before
</span><span class="line">bundling.</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>没有办法, 只能根据提示执行相应的命令, 但要在前面加sudo, 以上面为例:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo gem install tilt -v '2.0.1'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最后应该会出现如下提示, 说明安装成功:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Bundle complete! 13 Gemfile dependencies, 47 gems now installed.
</span><span class="line">Use `bundle show [gemname]` to see where a bundled gem is installed.
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>安装默认主题</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rake install</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>本地安装完毕. 顺便说一句, 所谓 rake 就是 ruby make 的缩写.</p>

<ul>
  <li>预览</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rake preview</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在浏览器中输入:<code>http://localhost:4000/</code>即可查看网站, 现在应该是一个黑色背景的空白页面. 命令行中按Ctrl+C结束预览.</p>

<h3 id="section">发布</h3>

<ul>
  <li>设置Github pages</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rake setup_github_pages</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>期间会有一个问句, 把上面记下的那个repository地址复制进去即可.</p>

<ul>
  <li>生成页面并部署</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rake generate
</span><span class="line">rake deploy</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面的命令可以简化为</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rake gen_deploy</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>将结果提交到Github</li>
</ul>

<p>上面的命令其实已经将结果(_deploy目录下的所有内容)提交到了main分支, 但我们的所有文件按照Octopress要求, 应该提交到source分支上, soure分支已经在上面的命令中在本地新建了, 所以我们只需要提交即可:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git add .
</span><span class="line">git commit -m 'comment here'
</span><span class="line">git push origin source</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果出现提示<code>Updates were rejected because the remote contains work that you do...</code>可以先执行下面的命令再执行上面三条</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git branch --unset-upstream</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>查看最终结果</li>
</ul>

<p>浏览器中地址栏输入<code>http://[your_username].github.io/</code>即可. 如果连接失败, 那可能要等一段时间, Github部署也是需要一段时间的.</p>

<h3 id="section-1">新建文章</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rake new_post["Post Title"]</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>Post Title</code>是想要新建的文章的标题, 运行上面的命令会在 octopress/source/_posts 目录下新增 yyyy-mm-dd-Post-Title.markdown 文件, 默认是使用的markdown, 如果想直接用html的话, 把拓展名改成html即可, 打开文件会发现文件已经有了几行文字, 这些是文章的metadata, 不要删除这段信息, 在下面写自己的文章就行了. 写完之后执行上面的<code>生成页面并部署</code>和<code>将结果提交到Github</code>两步即可.</p>

<p>参考</p>

<p>http://shengmingzhiqing.com/blog/setup-octopress-with-github-pages.html/
https://github.com/imathis/octopress/issues/121
http://stackoverflow.com/questions/12940626/github-error-message-permission-denied-publickey
https://github.com/Homebrew/homebrew/issues/30180
http://linfan.info/blog/2012/02/25/homebrew-installation-and-usage/
http://anandmanisankar.com/posts/set-up-blog-jekyll-github-pages/
http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html
http://stackoverflow.com/questions/24102498/escaping-double-curly-braces-inside-a-markdown-code-block-in-jekyll</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build My Own Blog Using GitHub Pages and Jekyll]]></title>
    <link href="http://rungezhai.github.io/blog/2015/12/21/build-my-own-blog-using-github-pages-and-jekyll/"/>
    <updated>2015-12-21T21:50:38+08:00</updated>
    <id>http://rungezhai.github.io/blog/2015/12/21/build-my-own-blog-using-github-pages-and-jekyll</id>
    <content type="html"><![CDATA[
<p>今天终于使用 GitHub Pages 和 Jekyll 搭建起了自己的博客, 本来一直想自己租个服务器用 WordPress 自己搭建一个个人博客网站, 但是一直没有行动, 一拖再拖. 最后发现本末倒置了, 工具不重要, 最主要的是想积累一些自己的东西, 有自己的一点空间, 分享自己的想法, 如果能帮助别人, 那就最好不过了.</p>

<!--More-->

<p>所以今天抽出时间先把整个环境搭起来, 先保证其可用性, 至于其他的, 比如美观什么的, 那是以后慢慢优化的事了.</p>

<p>本来准备用 Octopress, 但是根据文档一步一步配置, 发现过程太复杂. 我还是更喜欢直接用 Jekyll, 用 Jekyll 搭建博客甚至不需要在本地安装任何额外的程序, 因为 GitHub 本就支持 Jekyll, 所以只要按照 Jekyll 的要求组织文件, 然后 push 到 GitHub 上就行了. 当然这有一个问题, 就是 GitHub 发布有延时, 所以 push 成功后需要等一段时间才能看到更新, 这样就不好调试了, 所以最好是在本机也装一个 Jekyll, 在本机调试好以后再提交到 GitHub. 只要本机的 Jekyll 和 GitHub Pages 使用的 Jekyll 是同一个版本, 那本地的结果和服务器的结果就是一样的.</p>

<h2 id="repository">新建Repository</h2>

<p>在 GitHub 网站为 Blog 新建 Repository, 我这里取名 blog. 详细不再说了, 我这个新建的 Repository 的链接是</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">https://github.com/RungeZhai/blog.git</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>后面会用到.</p>

<p>在本机新建文件夹并进入该文件夹</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">mkdir blog
</span><span class="line"><span class="nb">cd </span>blog
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>初始化 git 并关联上面新建的 Repository</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">git init
</span><span class="line">git remote add origin https://github.com/RungeZhai/blog.git
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>新建 gh-pages 分支, 因为 GitHub 规定, 只有该分支中的页面, 才会自动生成网页文件</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">git checkout --orphan branch gh-pages
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>新建一个 index.html 文件, 并输入内容</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">&lt;!DOCTYPE html&gt;
</span><span class="line">&lt;html <span class="nv">lang</span><span class="o">=</span>“en-ca”&gt;
</span><span class="line">&lt;head&gt;
</span><span class="line">&lt;meta <span class="nv">charset</span><span class="o">=</span>“utf-8”&gt;
</span><span class="line">&lt;title&gt; Hello, World! &lt;/title&gt;
</span><span class="line">&lt;/head&gt;
</span><span class="line">&lt;body&gt;
</span><span class="line">&lt;h1&gt;H1&lt;/h1&gt;
</span><span class="line">&lt;/body&gt;
</span><span class="line">&lt;/html&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>提交修改</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">git add .
</span><span class="line">git commit -m <span class="s1">&#39;add index.html&#39;</span>
</span><span class="line">git push -u origin gh-pages
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>此时在浏览器中输入如下格式的链接</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">&lt;GitHub Username&gt;.github.io/&lt;Repository Name&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我这里是rungezhai.github.io/blog. 应该会看到一个空白页, 而不会看到 Hello, World!. 因为上面说了, GitHub 发布需要时间, 只要没报错, 说明到目前为止一切正常. 我等了足足两个小时才看到久违的 Hello, World!.</p>

<h2 id="jekyll-">增加 Jekyll 所需的文件</h2>

<p>Jekyll 的目录结构是下面这样的:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">.
</span><span class="line"><span class="p">|</span>
</span><span class="line"><span class="p">|</span>-- _config.yml
</span><span class="line"><span class="p">|</span>
</span><span class="line"><span class="p">|</span>-- _includes
</span><span class="line"><span class="p">|</span>       <span class="p">|</span>
</span><span class="line"><span class="p">|</span>       <span class="p">|</span>-- head.html
</span><span class="line"><span class="p">|</span>       <span class="p">|</span>-- ...
</span><span class="line"><span class="p">|</span>
</span><span class="line"><span class="p">|</span>-- _layouts
</span><span class="line"><span class="p">|</span>       <span class="p">|</span>
</span><span class="line"><span class="p">|</span>       <span class="p">|</span>-- page.html
</span><span class="line"><span class="p">|</span>       <span class="p">|</span>-- post.html
</span><span class="line"><span class="p">|</span>       <span class="p">|</span>-- ...
</span><span class="line"><span class="p">|</span>
</span><span class="line"><span class="p">|</span>-- _posts
</span><span class="line"><span class="p">|</span>       <span class="p">|</span>
</span><span class="line"><span class="p">|</span>       <span class="p">|</span>-- 2015-09-23-blog.md
</span><span class="line"><span class="p">|</span>       <span class="p">|</span>-- ...
</span><span class="line"><span class="p">|</span>
</span><span class="line"><span class="p">|</span>-- _site
</span><span class="line"><span class="p">|</span>     <span class="p">|</span>--CNAME
</span><span class="line"><span class="p">|</span>     <span class="p">|</span>--index.html
</span><span class="line"><span class="p">|</span>     <span class="p">|</span>--...
</span><span class="line"><span class="p">|</span>
</span><span class="line"><span class="p">|</span>-- index.html
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="configyml">新建 _config.yml</h3>

<p><code>_config.yml</code>是 Jekyll 的配置文件, 这里新增如下两行内容</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">markdown: redcarpet
</span><span class="line">baseurl: /blog
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>特别注意格式, 冒号后面要有空格. 第一行, redcarpet 是 GitHub 的 markdown 解析器. 第二行, baseurl 是 上面提到的链接格式处显示的文字, 默认是 repository 的名字.</p>

<h3 id="layout">_layout</h3>

<p>该目录用来存放模板文件, 在该目录下新建 default.html 文件, 内容如下:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">&lt;!DOCTYPE html&gt;
</span><span class="line">&lt;html&gt;
</span><span class="line">&lt;head&gt;
</span><span class="line">　　&lt;meta http-equiv<span class="o">=</span><span class="s2">&quot;content-type&quot;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&quot;text/html; charset=utf-8&quot;</span> /&gt;
</span><span class="line">　　&lt;title&gt;<span class="o">{{</span> page.title <span class="o">}}</span>&lt;/title&gt;
</span><span class="line">&lt;/head&gt;
</span><span class="line">&lt;body&gt;
</span><span class="line">
</span><span class="line">　　<span class="o">{{</span> content <span class="o">}}</span>
</span><span class="line">
</span><span class="line">&lt;/body&gt;
</span><span class="line">&lt;/html&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Jekyll使用Liquid模板语言，{{ page.title }}表示文章标题，{{ content }}表示文章内容，更多模板变量请参考官方文档。</p>

<h3 id="section">创建文章</h3>

<p>新建目录_posts, 进入该目录, 创建第一篇文章. 文章就是普通的文本文件, 文件名假定为2012-08-25-hello-world.html. 注意, 文件名必须为”年-月-日-文章标题.后缀名”的格式. 如果网页代码采用 html 格式, 后缀名为 html; 如果采用 markdown 格式, 后缀名为md. 在该文件中输入以下内容</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">---
</span><span class="line">layout: default
</span><span class="line">title: 你好，世界
</span><span class="line">---
</span><span class="line">&lt;h2&gt;<span class="o">{{</span> page.title <span class="o">}}</span>&lt;/h2&gt;
</span><span class="line">&lt;p&gt;我的第一篇文章&lt;/p&gt;
</span><span class="line">&lt;p&gt;<span class="o">{{</span> page.date <span class="p">|</span> date_to_string <span class="o">}}</span>&lt;/p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>

<table>
  <tbody>
    <tr>
      <td>每篇文章的头部, 必须有一个 yaml 文件头, 用来设置一些元数据. 它用三根短划线”—”, 标记开始和结束, 里面每一行设置一种元数据. “layout: default”，表示该文章的模板使用 _layouts 目录下的 default.html 文件; “title: 你好, 世界”, 表示该文章的标题是”你好, 世界”，如果不设置这个值, 默认使用嵌入文件名(2012-08-25-hello-world.html)的标题, 即”hello world”。 在 yaml 文件头后面, 就是文章的正式内容, 里面可以使用模板变量. {{ page.title }}就是文件头中设置的”你好，世界”，{{ page.date }}则是嵌入文件名的日期（也可以在文件头重新定义 date 变量）, “</td>
      <td>date_to_string”表示将 page.date 变量转化成人类可读的格式。</td>
    </tr>
  </tbody>
</table>

<h3 id="section-1">首页</h3>

<p>首页就是我们上面新建的 index.html, 现在把它修改成如下:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">---
</span><span class="line">layout: default
</span><span class="line">title: 我的Blog
</span><span class="line">---
</span><span class="line">
</span><span class="line">&lt;h2&gt;<span class="o">{{</span> page.title <span class="o">}}</span>&lt;/h2&gt;
</span><span class="line">&lt;p&gt;最新文章&lt;/p&gt;
</span><span class="line">&lt;ul&gt;
</span><span class="line">　　<span class="o">{</span>% <span class="k">for</span> post in site.posts %<span class="o">}</span>
</span><span class="line">　　　　&lt;li&gt;<span class="o">{{</span> post.date <span class="p">|</span> date_to_string <span class="o">}}</span> &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;{{ site.baseurl }}{{ post.url }}&quot;</span>&gt;<span class="o">{{</span> post.title <span class="o">}}</span>&lt;/a&gt;&lt;/li&gt;
</span><span class="line">　　<span class="o">{</span>% endfor %<span class="o">}</span>
</span><span class="line">&lt;/ul&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>它的Yaml文件头表示, 首页使用default模板, 标题为”我的Blog”. 然后，首页使用了{% for post in site.posts %}, 表示对所有帖子进行一个遍历. 这里要注意的是, Liquid模板语言规定, 输出内容使用两层大括号, 单纯的命令使用一层大括号. 至于{{site.baseurl}}就是_config.yml中设置的baseurl变量.</p>

<h3 id="section-2">发布</h3>

<p>上面已经提到了, 其实就是提交</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">git add .
</span><span class="line">git commit -m <span class="s1">&#39;Init Jekyll&#39;</span>
</span><span class="line">git push -u origin gh-pages
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后在浏览器里输入上面提到的链接, 就可以看到自己的博客了!!! 呃… 还是”Hello, World!“? 可能需要时间, 耐心等几分钟.</p>

<h2 id="jekyll">安装 Jekyll</h2>

<p>为了本机立即查看效果, 我们需要在本机安装Jekyll. 为了保证本机的 Jekyll 和 GitHub Pages 使用的 Jekyll 是同一个版本, 我们直接使用 GitHub 的 Jekyll:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo gem install github-pages
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后进入上文的Repository目录, 执行下面的命令:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">jekyll serve --watch --baseurl <span class="s2">&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>应该会看到类似下面的提示:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">Configuration file: .../blog/_config.yml
</span><span class="line">Source: .../blog
</span><span class="line">Destination: .../blog/_site
</span><span class="line">Generating...
</span><span class="line"><span class="k">done</span>.
</span><span class="line">Auto-regeneration: enabled <span class="k">for</span> <span class="s1">&#39;.../blog&#39;</span>
</span><span class="line">Configuration file: .../blog/_config.yml
</span><span class="line">Server address: http://127.0.0.1:4000/
</span><span class="line">Server running... press ctrl-c to stop.
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在浏览器中输入 http://127.0.0.1:4000/ 就可以看到我们的成果了.</p>

<p>注: 文中部分内容抄袭的阮一峰大神的, <a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html">附上链接</a></p>

]]></content>
  </entry>
  
</feed>
