<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Xcode | Runge Zhai's Blog]]></title>
  <link href="http://rungezhai.github.io/blog/categories/xcode/atom.xml" rel="self"/>
  <link href="http://rungezhai.github.io/"/>
  <updated>2015-12-25T00:33:03+08:00</updated>
  <id>http://rungezhai.github.io/</id>
  <author>
    <name><![CDATA[Runge Zhai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Merge Static Libraries]]></title>
    <link href="http://rungezhai.github.io/blog/2015/12/24/merge-static-libraries/"/>
    <updated>2015-12-24T15:29:24+08:00</updated>
    <id>http://rungezhai.github.io/blog/2015/12/24/merge-static-libraries</id>
    <content type="html"><![CDATA[<p>Yesterday I was asked to merge multiple Libraries into one. This is a whole new area! Here is the background: Members of our department are developing three submodules of the main iOS application, and each submodule is a subproject of main application and output a <code>.a</code> static library file and a <code>.bundle</code> resource file. And now the head of our team wants to merge all the libraries into one and only expose this only one <code>.a</code> and <code>.bundle</code> file to the main application. <strong><code>"And with minimum modification"</code></strong>, said my boss.</p>

<!--more-->

<h2 id="what-i-did">What I Did</h2>

<p>So I created a new project and make the current three subproject as subprojects of the new project. The new project has two target a <code>.a</code> library and  <code>.bundle</code> resource. Both targets’ output are output of the merging of the three submodule accordingly.</p>

<p>The bundle file is just something like a folder, so merging is simply copying three folder into another. As of Xcode, go to <code>Build Phases -&gt; Copy Bundle Resources</code> and add subproject’s .bundle target.</p>

<p>The merging of <code>.a</code> file are simple too, it’s only that I have never touched this area before.
Add the following line to <code>Build Phases -&gt; Click "+" button on the topleft -&gt; New Run Script Phase</code> (Say we want merge <code>A.a</code>, <code>B.a</code>, <code>C.a</code> into <code>AllInOne.a</code>)</p>

<p><code>bash
libtool -static -o ${BUILT_PRODUCTS_DIR}/AllInOne.a ${BUILT_PRODUCTS_DIR}/A.a ${BUILT_PRODUCTS_DIR}/B.a ${BUILT_PRODUCTS_DIR}/C.a
</code></p>

<blockquote>
  <p>As of <code>Minimum Modification</code>, the only one is accessing bundle resources. Previously we get bundle from <code>MainBundle</code>, but now we have to get the merged bundle first and then get the bundle we want in the merged bundle, which, I think, is qualified as <code>Minimum Modification</code>.</p>
</blockquote>

<h2 id="what-i-learned">What I Learned</h2>

<p>The solution above is not rigorous. One of the libraries might not support architectures that others do, so the might-not-supported architectures portion of the libraries should not be merged. The following command can figure out the architectures for which the library is being built:</p>

<p><code>bash
LIPO_ARCH=$(lipo -info ${BUILT_PRODUCTS_DIR}/${EXECUTABLE_NAME} | awk 'END{ print $NF }')
</code></p>

<p>The following command creates a thin version of the library with supported architectures in <code>LIPO_ARCH</code>:</p>

<p><code>bash
lipo -thin ${LIPO_ARCH} ${LIBRARY_NAME} -output ${LIBRARY_NAME}
</code></p>

<blockquote>
  <p>A flat library is a library that support multiple architectures.</p>
</blockquote>

<p><br /></p>

<p>Reference</p>

<p><a href="http://stackoverflow.com/questions/9531014/linking-2-static-libs-into-1-for-ios/21225126#21225126">Linking 2 static libs into 1 for iOS</a></p>

<p><a href="http://www.theconsultant.net/2005/09/macosx-operating-on-fat-files/">MacOSX: Trimming fat from Mach-O fat files</a></p>
]]></content>
  </entry>
  
</feed>
