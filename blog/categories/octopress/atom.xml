<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Octopress | Runge Zhai's Blog]]></title>
  <link href="http://rungezhai.github.io/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://rungezhai.github.io/"/>
  <updated>2015-12-25T00:33:03+08:00</updated>
  <id>http://rungezhai.github.io/</id>
  <author>
    <name><![CDATA[Runge Zhai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress Q&amp;A]]></title>
    <link href="http://rungezhai.github.io/blog/2015/12/22/octopress-q-and-a/"/>
    <updated>2015-12-22T22:36:52+08:00</updated>
    <id>http://rungezhai.github.io/blog/2015/12/22/octopress-q-and-a</id>
    <content type="html"><![CDATA[<p></p>

<p>关于Octopress的配置在<a href="http://shengmingzhiqing.com/">这个博客</a>中有详细的教程, 这里我只是做一些很必要的配置或者开发中遇到的各种问题的总结. 会一直持续更新.</p>

<!--more-->

<h3 id="section">文章在首页显示摘要</h3>

<p>一般情况下我们想让文章在主页只显示摘要, 而不是全部显示, 这种情况下, 我们只需要在文章开头的摘要后面空行加入<code>&lt;!--more--&gt;</code>.</p>

<h3 id="markdown">Markdown文件拓展名修改</h3>

<p>默认的MarkDown文件名是<code>.markdown</code>. 我们想把它改成<code>.md</code>, 这样更简洁. 方法是修改 <code>rakefile</code> 文件, 将下面两行</p>

<p><code>
new_post_ext    = "markdown"  # default new post file extension when using the new_post task
new_page_ext    = "markdown"  # default new page file extension when using the new_page task
</code></p>

<p>替换成</p>

<p><code>
new_post_ext    = "md"  # 默认新日志文件后缀
new_page_ext    = "md"  # 默认新页面文件后缀
</code></p>

<h3 id="markdown-1">修改默认Markdown解释器</h3>

<p>默认的Markdown解释器是<code>rdiscount</code>, 可以把它改成GitHub推荐的<code>kramdown</code>. 打开<code>Gemfile</code>, 在最后新增下面一行</p>

<p><code>
gem 'kramdown'
</code></p>

<p>然后在Terminal执行<code>bundle install</code>安装这个依赖项(很可能已经安装过了).</p>

<p>再打开<code>_config.yml</code>, 找到<code>markdown: rdiscount</code>, 将其中的<code>rdiscout</code>改成<code>kramdown</code>. 并将下面的删除或注释掉(yml文件的行注释是前面加<code>#</code>).</p>

<p>```
rdiscount:
  extensions:
    - autolink
    - footnotes
    - smart</p>

<p>```</p>

<h3 id="section-1">在主页侧边栏显示文章分类</h3>

<ul>
  <li>在<code>plugins</code>目录下新建<code>category_list_tag.rb</code>文件, 内容如下:</li>
</ul>

<p>```
module Jekyll 
  class CategoryListTag &lt; Liquid::Tag 
    def render(context) 
      html = “” 
      categories = context.registers[:site].categories.keys 
      categories.sort.each do |category| 
        posts_in_category = context.registers[:site].categories[category].size 
        category_dir = context.registers[:site].config[‘category_dir’] 
        category_url = File.join(category_dir, category.gsub(/_|\P{Word}/, ‘-‘).gsub(/-{2,}/, ‘-‘).downcase) 
        html « “&lt;li class='category'&gt;<a href="http://rungezhai.github.io/#{category_url}/">#{category} (#{posts_in_category})</a>&lt;/li&gt;\n” 
      end 
      html 
    end 
  end 
end</p>

<p>Liquid::Template.register_tag(‘category_list’, Jekyll::CategoryListTag)</p>

<p>```</p>

<ul>
  <li><code>source/include/custom/asides</code>目录下新建<code>category_list.html</code>文件, 内容如下:</li>
</ul>

<p>```</p>
<section>
  <h1>Categories</h1>
  <ul id="categories">
    {% category_list %}
  </ul>
</section>

<p>```</p>

<ul>
  <li>
    <p>修改<code>_config.yml</code>文件</p>

    <p>找到以<code>default_asides:</code>开头的一行, 添加<code>custom/asides/category_list.html</code>. 
  到了这里, 重新生成部署已经可以看到结果了, 但仔细看会发现, 分类的名字中的大写字母都被变成了小写, 如果想改成本来的大小写, 参考下一步.</p>
  </li>
  <li>
    <p>修改<code>Jekyll</code>, 取消自动小写分类名称
  找到<code>Jekyll</code>的源代码目录, 我这里是<code>/Users/liuge/.rvm/gems/ruby-1.9.3-p551/gems/jekyll-2.5.3/lib/jekyll</code> 修改目录下的<code>post.rb</code>文件, 找到如下内容, 删除其中的<code>downcase</code>.</p>
  </li>
</ul>

<p>```
self.categories = self.data.pluralized_array(‘category’, ‘categories’).map {|c| c.to_s.downcase}</p>

<p>```</p>

<blockquote>
  <p>如果遇到<code>Error:  Pygments can't parse unknown language: &lt;/p&gt;</code>这种问题, 一般是文章中包含HTML代码等非常规文字, 修改<code>plugins/pygments_code.rb</code>文件, 将<code>raise "Pygments can't parse unknown language: #{lang}."</code>替换成<code>raise "Pygments can't parse unknown language: #{lang}#{code}."</code> 然后再执行 <code>rake generate</code> 就可以看到产生问题的位置. 实际使用中, 我发现产生问题的位置都是在文章中贴的HTML代码块或者其他非常规文字的位置, 解决方法是代码结束的”```“(triple-backtick)前后都需要留一个空行. 顺便说一句, Pygments是语法高亮插件.</p>
</blockquote>

<h3 id="section-2">在文章中显示特殊字符</h3>

<p>有一些字符是Octopress得保留字符, 比如<code>{{, ^ ...</code>等. 若要在文中显示这些字符</p>

<p></p>

<p>需要将包含这些字符的文字放在 <code>{% raw %}</code> 和 <code>{% endraw %}</code>之间.</p>

<p></p>

<p></p>

<p><br /></p>

<p>Reference</p>

<p><a href="http://www.narga.net/improve-octopress-advanced-tweaks-tips/">improve-octopress-advanced-tweaks-tips</a></p>

<p><a href="http://i.rexdf.org/blog/2014/09/26/octopressbo-ke-geng-xin-ri-zhi/">Octopress CDN Config</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Establishing Personal Blog Using Octopress]]></title>
    <link href="http://rungezhai.github.io/blog/2015/12/22/establishing-personal-blog-using-octopress/"/>
    <updated>2015-12-22T21:40:00+08:00</updated>
    <id>http://rungezhai.github.io/blog/2015/12/22/establishing-personal-blog-using-octopress</id>
    <content type="html"><![CDATA[<p></p>

<p>本来是想直接用Jekyll进行个人博客搭建的, 但是搭建完以后发现, 生成的页面太原始了, 对于markdown的代码高亮基本就没有, 只是和其他文字字体不一样, 一点都不明显. 况且我对于Web开发并不熟, 自己调整页面布局什么的又是无底洞了. 所以虽然配置过程很痛苦, 最后还是转向了Octopress.</p>

<!--More-->

<p>首先说明, 本文的环境是Mac OSX.</p>

<p>本来配置过程并不复杂, 就几句命令, 但是其背后是各种依赖, 每一步都是坑, 先贴一下其中用到的Bundle的依赖, 让大家见识一下:</p>

<p><code>
Using rake 10.4.2
Using RedCloth 4.2.9
Using blankslate 2.1.2.4
Using chunky_png 1.3.4
Using fast-stemmer 1.0.2
Using classifier-reborn 2.0.3
Using coffee-script-source 1.9.1.1
Using execjs 2.6.0
Using coffee-script 2.4.1
Using colorator 0.1
Using multi_json 1.11.2
Using sass 3.4.18
Using compass-core 1.0.3
Using compass-import-once 1.0.5
Using rb-fsevent 0.9.6
Using ffi 1.9.10
Using rb-inotify 0.9.5
Using compass 1.0.3
Using tilt 2.0.1
Using haml 4.0.7
Using jekyll-coffeescript 1.0.1
Using jekyll-gist 1.3.4
Using jekyll-paginate 1.1.0
Using jekyll-sass-converter 1.3.0
Using listen 3.0.3
Using jekyll-watch 1.3.0
Using kramdown 1.8.0
Using liquid 2.6.3
Using mercenary 0.3.5
Using posix-spawn 0.3.11
Using yajl-ruby 1.2.1
Using pygments.rb 0.6.3
Using redcarpet 3.3.2
Using safe_yaml 1.0.4
Using parslet 1.5.0
Using toml 0.1.2
Using jekyll 2.5.3
Using jekyll-sitemap 0.9.0
Using octopress-hooks 2.6.1
Using octopress-date-format 2.0.2
Using rack 1.6.4
Using rack-protection 1.5.3
Using rdiscount 2.1.8
Using sass-globbing 1.0.0
Using sinatra 1.4.6
Using stringex 1.4.0
Using bundler 1.10.6
</code></p>

<p>一屏幕都显示不开有没有!!!</p>

<h3 id="brew">配置Brew</h3>

<ul>
  <li>安装</li>
</ul>

<p>HomeBrew 是一个非常有用的软件包管理系统, 一般情况下, Mac机器已经安装过Brew了. 可以使用<code>brew --version</code>查看brew的版本. 如果机器没有安装Brew, 可以运行下面命令安装</p>

<p><code>
ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
</code></p>

<p>或者想卸载重装, 运行下面命令卸载</p>

<p><code>
ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)"
</code></p>

<p>按照提示一步一步来即可, 期间可能会遇到<code>Permission denied</code>什么的, 那么就在命令前面加上<code>sudo</code>(super do)再执行一遍喽.</p>

<ul>
  <li>诊断Brew</li>
</ul>

<p>运行 <code>brew doctor</code> 来检查Brew的状况. 
如果出现如 <code>Unbrewed *** were found</code> 这种提示, 可以忽略, 如果实在不放心, 那就按照提示把它们统统删掉(不放心可以删之前先备份).
如果出现 <code>Homebrew's sbin was not found in your PATH but you have installed...</code> 这种提示, 在命令行运行 <code>export PATH="/usr/local/sbin:$PATH"</code>.
总之, 到最后如果完全没有问题的话, 运行 <code>brew doctor</code> 会出现 <code>Your system is ready to brew.</code></p>

<h3 id="github-repository">新建Github Repository</h3>
<p>新建一个repository, 命名规则为<code>[your_username].github.io</code>. 把其中的<code>[your_username]</code>换成你自己在Github 上的用户名, 我这里是rungezhai.github.io. 记下这个repository的链接, https或者SSH都可以, 下面会用到.</p>

<h3 id="octopress">本地安装Octopress</h3>

<ul>
  <li>安装Ruby</li>
</ul>

<p>首先使用RVM安装Ruby, Octopress使用的ruby最好是1.9.3版本, Mac10.10以后的版本自带的Ruby版本太高, 最好不要超过2.0.0</p>

<p>执行下面的命令安装RVM</p>

<p><code>
curl -L https://get.rvm.io | bash -s stable --ruby
</code></p>

<p>执行下面的命令安装ruby</p>

<p>```
rvm install 2.0.0
rvm use 2.0.0
rvm rubygems latest</p>

<p>```</p>

<ul>
  <li>把Octopress克隆到本地</li>
</ul>

<p><code>
git clone git://github.com/imathis/octopress.git rungezhai.github.io
cd rungezhai.github.io
</code></p>

<p>最后一个参数<code>rungezhai.github.io</code>是克隆到的目录, 我为了命名统一, 克隆到了和Github repository同样名字的目录下.</p>

<p>然后安装所需的依赖项</p>

<p><code>
sudo gem install bundler
bundle install
</code></p>

<p>期间可能会出现如下类似错误</p>

<p><code>
An error occurred while installing tilt (2.0.1), and Bundler
cannot continue.
Make sure that `gem install tilt -v '2.0.1'` succeeds before
bundling.
</code></p>

<p>没有办法, 只能根据提示执行相应的命令, 但要在前面加sudo, 以上面为例:</p>

<p><code>
sudo gem install tilt -v '2.0.1'
</code></p>

<p>最后应该会出现如下提示, 说明安装成功:</p>

<p>```
Bundle complete! 13 Gemfile dependencies, 47 gems now installed.
Use <code>bundle show [gemname]</code> to see where a bundled gem is installed.</p>

<p>```</p>

<ul>
  <li>安装默认主题</li>
</ul>

<p><code>
rake install
</code></p>

<p>本地安装完毕. 顺便说一句, 所谓 rake 就是 ruby make 的缩写.</p>

<ul>
  <li>预览</li>
</ul>

<p><code>
rake preview
</code></p>

<p>在浏览器中输入:<code>http://localhost:4000/</code>即可查看网站, 现在应该是一个黑色背景的空白页面. 命令行中按Ctrl+C结束预览.</p>

<h3 id="section">发布</h3>

<ul>
  <li>设置Github pages</li>
</ul>

<p><code>
rake setup_github_pages
</code></p>

<p>期间会有一个问句, 把上面记下的那个repository地址复制进去即可.</p>

<ul>
  <li>生成页面并部署</li>
</ul>

<p><code>
rake generate
rake deploy
</code></p>

<p>上面的命令可以简化为</p>

<p><code>
rake gen_deploy
</code></p>

<ul>
  <li>将结果提交到Github</li>
</ul>

<p>上面的命令其实已经将结果(_deploy目录下的所有内容)提交到了main分支, 但我们的所有文件按照Octopress要求, 应该提交到source分支上, soure分支已经在上面的命令中在本地新建了, 所以我们只需要提交即可:</p>

<p><code>
git add .
git commit -m 'comment here'
git push origin source
</code></p>

<p>如果出现提示<code>Updates were rejected because the remote contains work that you do...</code>可以先执行下面的命令再执行上面三条</p>

<p><code>
git branch --unset-upstream
</code></p>

<ul>
  <li>查看最终结果</li>
</ul>

<p>浏览器中地址栏输入<code>http://[your_username].github.io/</code>即可. 如果连接失败, 那可能要等一段时间, Github部署也是需要一段时间的.</p>

<h3 id="section-1">新建文章</h3>

<p><code>
rake new_post["Post Title"]
</code></p>

<p><code>Post Title</code>是想要新建的文章的标题, 运行上面的命令会在 octopress/source/_posts 目录下新增 yyyy-mm-dd-Post-Title.markdown 文件, 默认是使用的markdown, 如果想直接用html的话, 把拓展名改成html即可, 打开文件会发现文件已经有了几行文字, 这些是文章的metadata, 不要删除这段信息, 在下面写自己的文章就行了. 写完之后执行上面的<code>生成页面并部署</code>和<code>将结果提交到Github</code>两步即可.</p>

<p>参考</p>

<p>http://shengmingzhiqing.com/blog/setup-octopress-with-github-pages.html/
https://github.com/imathis/octopress/issues/121
http://stackoverflow.com/questions/12940626/github-error-message-permission-denied-publickey
https://github.com/Homebrew/homebrew/issues/30180
http://linfan.info/blog/2012/02/25/homebrew-installation-and-usage/
http://anandmanisankar.com/posts/set-up-blog-jekyll-github-pages/
http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html
http://stackoverflow.com/questions/24102498/escaping-double-curly-braces-inside-a-markdown-code-block-in-jekyll</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build My Own Blog Using GitHub Pages and Jekyll]]></title>
    <link href="http://rungezhai.github.io/blog/2015/12/21/build-my-own-blog-using-github-pages-and-jekyll/"/>
    <updated>2015-12-21T21:50:38+08:00</updated>
    <id>http://rungezhai.github.io/blog/2015/12/21/build-my-own-blog-using-github-pages-and-jekyll</id>
    <content type="html"><![CDATA[<p></p>

<p>今天终于使用 GitHub Pages 和 Jekyll 搭建起了自己的博客, 本来一直想自己租个服务器用 WordPress 自己搭建一个个人博客网站, 但是一直没有行动, 一拖再拖. 最后发现本末倒置了, 工具不重要, 最主要的是想积累一些自己的东西, 有自己的一点空间, 分享自己的想法, 如果能帮助别人, 那就最好不过了.</p>

<!--More-->

<p>所以今天抽出时间先把整个环境搭起来, 先保证其可用性, 至于其他的, 比如美观什么的, 那是以后慢慢优化的事了.</p>

<p>本来准备用 Octopress, 但是根据文档一步一步配置, 发现过程太复杂. 我还是更喜欢直接用 Jekyll, 用 Jekyll 搭建博客甚至不需要在本地安装任何额外的程序, 因为 GitHub 本就支持 Jekyll, 所以只要按照 Jekyll 的要求组织文件, 然后 push 到 GitHub 上就行了. 当然这有一个问题, 就是 GitHub 发布有延时, 所以 push 成功后需要等一段时间才能看到更新, 这样就不好调试了, 所以最好是在本机也装一个 Jekyll, 在本机调试好以后再提交到 GitHub. 只要本机的 Jekyll 和 GitHub Pages 使用的 Jekyll 是同一个版本, 那本地的结果和服务器的结果就是一样的.</p>

<h2 id="repository">新建Repository</h2>

<p>在 GitHub 网站为 Blog 新建 Repository, 我这里取名 blog. 详细不再说了, 我这个新建的 Repository 的链接是</p>

<p><code>
https://github.com/RungeZhai/blog.git
</code></p>

<p>后面会用到.</p>

<p>在本机新建文件夹并进入该文件夹</p>

<p><code>bash
mkdir blog
cd blog
</code></p>

<p>初始化 git 并关联上面新建的 Repository</p>

<p><code>bash
git init
git remote add origin https://github.com/RungeZhai/blog.git
</code></p>

<p>新建 gh-pages 分支, 因为 GitHub 规定, 只有该分支中的页面, 才会自动生成网页文件</p>

<p><code>bash
git checkout --orphan branch gh-pages
</code></p>

<p>新建一个 index.html 文件, 并输入内容</p>

<p>```
&lt;!DOCTYPE html&gt;
&lt;html lang=“en-ca”&gt;</p>
<head>
&lt;meta charset=“utf-8”&gt;
<title> Hello, World! </title>
</head>
<body>
<h1>H1</h1>
</body>
<p>&lt;/html&gt;</p>

<p>```</p>

<p>提交修改</p>

<p><code>
git add .
git commit -m 'add index.html'
git push -u origin gh-pages
</code></p>

<p>此时在浏览器中输入如下格式的链接</p>

<p>```</p>
<github username="">.github.io/<repository name="">
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>我这里是rungezhai.github.io/blog. 应该会看到一个空白页, 而不会看到 Hello, World!. 因为上面说了, GitHub 发布需要时间, 只要没报错, 说明到目前为止一切正常. 我等了足足两个小时才看到久违的 Hello, World!.
</span><span class='line'>
</span><span class='line'>##增加 Jekyll 所需的文件
</span><span class='line'>
</span><span class='line'>Jekyll 的目录结构是下面这样的:
</span></code></pre></td></tr></table></div></figure>
.
|
|-- _config.yml
|
|-- _includes
|       |
|       |-- head.html
|       |-- ...
|
|-- _layouts
|       |
|       |-- page.html
|       |-- post.html
|       |-- ...
|
|-- _posts
|       |
|       |-- 2015-09-23-blog.md
|       |-- ...
|
|-- _site
|     |--CNAME
|     |--index.html
|     |--...
|
|-- index.html

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>###新建 _config.yml
</span><span class='line'>
</span><span class='line'>`_config.yml`是 Jekyll 的配置文件, 这里新增如下两行内容
</span></code></pre></td></tr></table></div></figure>
markdown: redcarpet
baseurl: /blog
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>特别注意格式, 冒号后面要有空格. 第一行, redcarpet 是 GitHub 的 markdown 解析器. 第二行, baseurl 是 上面提到的链接格式处显示的文字, 默认是 repository 的名字.
</span><span class='line'>
</span><span class='line'>###_layout
</span><span class='line'>
</span><span class='line'>该目录用来存放模板文件, 在该目录下新建 default.html 文件, 内容如下:
</span></code></pre></td></tr></table></div></figure>
&lt;!DOCTYPE html&gt;
<html>
<head>
　　<meta http-equiv="content-type" content="text/html; charset=utf-8" />
　　<title>{{ page.title }}</title>
</head>
<body>

　　{{ content }}

</body>
</html>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>Jekyll使用Liquid模板语言，{{ page.title }}表示文章标题，{{ content }}表示文章内容，更多模板变量请参考官方文档。
</span><span class='line'>
</span><span class='line'>###创建文章
</span><span class='line'>
</span><span class='line'>新建目录_posts, 进入该目录, 创建第一篇文章. 文章就是普通的文本文件, 文件名假定为2012-08-25-hello-world.html. 注意, 文件名必须为"年-月-日-文章标题.后缀名"的格式. 如果网页代码采用 html 格式, 后缀名为 html; 如果采用 markdown 格式, 后缀名为md. 在该文件中输入以下内容
</span></code></pre></td></tr></table></div></figure>
---
layout: default
title: 你好，世界
---
<h2>{{ page.title }}</h2>
<p>我的第一篇文章</p>
<p>{{ page.date | date_to_string }}</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>每篇文章的头部, 必须有一个 yaml 文件头, 用来设置一些元数据. 它用三根短划线"—", 标记开始和结束, 里面每一行设置一种元数据. "layout: default"，表示该文章的模板使用 _layouts 目录下的 default.html 文件; "title: 你好, 世界”, 表示该文章的标题是"你好, 世界"，如果不设置这个值, 默认使用嵌入文件名(2012-08-25-hello-world.html)的标题, 即"hello world"。 在 yaml 文件头后面, 就是文章的正式内容, 里面可以使用模板变量. {{ page.title }}就是文件头中设置的"你好，世界"，{{ page.date }}则是嵌入文件名的日期（也可以在文件头重新定义 date 变量）, "| date_to_string"表示将 page.date 变量转化成人类可读的格式。
</span><span class='line'>
</span><span class='line'>###首页
</span><span class='line'>
</span><span class='line'>首页就是我们上面新建的 index.html, 现在把它修改成如下:
</span></code></pre></td></tr></table></div></figure>
---
layout: default
title: 我的Blog
---

<h2>{{ page.title }}</h2>
<p>最新文章</p>
<ul>
　　{% for post in site.posts %}
　　　　<li>{{ post.date | date_to_string }} <a href="{{ site.baseurl }}{{ post.url }}">{{ post.title }}</a></li>
　　{% endfor %}
</ul>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>它的Yaml文件头表示, 首页使用default模板, 标题为"我的Blog". 然后，首页使用了{% for post in site.posts %}, 表示对所有帖子进行一个遍历. 这里要注意的是, Liquid模板语言规定, 输出内容使用两层大括号, 单纯的命令使用一层大括号. 至于{{site.baseurl}}就是_config.yml中设置的baseurl变量.
</span><span class='line'>
</span><span class='line'>###发布
</span><span class='line'>
</span><span class='line'>上面已经提到了, 其实就是提交
</span></code></pre></td></tr></table></div></figure> bash
git add .
git commit -m 'Init Jekyll'
git push -u origin gh-pages
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>然后在浏览器里输入上面提到的链接, 就可以看到自己的博客了!!! 呃… 还是"Hello, World!“? 可能需要时间, 耐心等几分钟.
</span><span class='line'>
</span><span class='line'>##安装 Jekyll
</span><span class='line'>
</span><span class='line'>为了本机立即查看效果, 我们需要在本机安装Jekyll. 为了保证本机的 Jekyll 和 GitHub Pages 使用的 Jekyll 是同一个版本, 我们直接使用 GitHub 的 Jekyll:
</span></code></pre></td></tr></table></div></figure> bash
sudo gem install github-pages
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>然后进入上文的Repository目录, 执行下面的命令:
</span></code></pre></td></tr></table></div></figure> bash
jekyll serve --watch --baseurl ""
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>应该会看到类似下面的提示:
</span></code></pre></td></tr></table></div></figure>
Configuration file: .../blog/_config.yml
Source: .../blog
Destination: .../blog/_site
Generating...
done.
Auto-regeneration: enabled for '.../blog'
Configuration file: .../blog/_config.yml
Server address: http://127.0.0.1:4000/
Server running... press ctrl-c to stop.
```

在浏览器中输入 http://127.0.0.1:4000/ 就可以看到我们的成果了.

注: 文中部分内容抄袭的阮一峰大神的, [附上链接](http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html)


</repository></github>
]]></content>
  </entry>
  
</feed>
